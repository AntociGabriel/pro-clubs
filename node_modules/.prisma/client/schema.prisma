// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  platform      String? // PS5/Xbox X|S/PC
  country       String?
  eaId          String?   @unique
  positions     String[] // Массив позиций игрока
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Отношения
  team        Team?         @relation("TeamMembers", fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teamId      String?       @db.ObjectId
  captainOf   Team?         @relation("TeamCaptain")
  playerStats PlayerStats[]
  accounts    Account[]
  sessions    Session[]
}

model TeamTournament {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String     @db.ObjectId
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String     @db.ObjectId
}

model Team {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  logo            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  eloRating       Int              @default(1000)
  captain         User             @relation("TeamCaptain", fields: [captainId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  captainId       String           @unique @db.ObjectId
  members         User[]           @relation("TeamMembers")
  homeMatches     Match[]          @relation("HomeTeamMatches")
  awayMatches     Match[]          @relation("AwayTeamMatches")
  teamTournaments TeamTournament[]
}

model Match {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime
  homeTeam   Team     @relation("HomeTeamMatches", fields: [homeTeamId], references: [id])
  homeTeamId String   @db.ObjectId
  awayTeam   Team     @relation("AwayTeamMatches", fields: [awayTeamId], references: [id])
  awayTeamId String   @db.ObjectId
  homeScore  Int
  awayScore  Int
  status     String // scheduled, completed, cancelled
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Отношения
  playerStats PlayerStats[]
}

model PlayerStats {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String   @db.ObjectId
  player    User     @relation(fields: [playerId], references: [id])
  playerId  String   @db.ObjectId
  rating    Int
  xp        Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  type            String // Play-Off, Group + Play-Off, League
  status          String // upcoming, active, completed
  minTeams        Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  teamTournaments TeamTournament[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
